{"version":3,"sources":["components/navbar/Navbar.js","components/home/Home.js","components/map/Map.js","components/new/New.js","components/router/Router.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","useState","location","pathname","slice","active","setActive","HOME","MAP","NEW","pageNames","handleItemClick","e","name","className","Menu","borderless","Item","as","Link","to","onClick","Home","Map","gardens","setGardens","coordsToNames","setCoordsToNames","currentGarden","setCurrentGarden","gardenPositions","setGardenPositions","atlantaConfig","useMemo","zoom","view","subscriptionKeyCredential","window","atlas","service","SubscriptionKeyCredential","authOptions","subscriptionKey","pipeline","MapsURL","newPipeline","searchURL","SearchURL","useEffect","a","fetch","response","json","console","log","getGardens","newCoordsToNames","newGardenPositions","gardenName","gardenData","query","searchAddress","Aborter","timeout","limit","results","data","geojson","getFeatures","push","getGardenPositions","map","center","datasource","source","DataSource","resultLayer","layer","SymbolLayer","iconOptions","image","anchor","allowOverlap","textOptions","popup","Popup","events","add","sources","layers","gardenPosition","content","coordinate","shapes","length","geometry","coordinates","setOptions","position","open","createMap","id","NAME","ADDRESS","DESCRIPTION","replaceAll","EMAIL","IMAGE_URL","src","alt","New","selectedFile","setSelectedFile","setName","address","setAddress","email","setEmail","description","setDescription","error","setError","style","margin","method","onSubmit","preventDefault","formData","FormData","formName","formAddress","formEmail","formDescription","append","body","then","status","Input","type","placeholder","onChange","event","target","value","rows","files","Router","exact","path","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8cb786c.chunk.js","sourcesContent":["import { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\n\nconst Navbar = (props) => {\n    const [active, setActive] = useState(props.location ? props.location.pathname.slice(1) : \"home\");\n    const HOME = \"home\";\n    const MAP = \"map\";\n    const NEW = \"new\";\n    const pageNames = {};\n    pageNames[HOME] = \"/\";\n    pageNames[MAP] = \"/map\";\n    pageNames[NEW] = \"/new\";\n\n    const handleItemClick = (e, { name }) => setActive(name)\n\n    return (\n        <div className = \"p-2\">\n            <Menu borderless className = \"Navbar\">\n                <Menu.Item\n                    as = {Link}\n                    to = {pageNames[HOME]}\n                    name = {HOME}\n                    active={active === HOME}\n                    onClick={handleItemClick}\n                >\n                    Home\n                </Menu.Item>   \n                <Menu.Item\n                    as = {Link}\n                    to = {pageNames[MAP]}\n                    name = {MAP}\n                    active={active === MAP}\n                    onClick={handleItemClick}\n                >\n                    Map\n                </Menu.Item>    \n                <Menu.Item\n                    as = {Link}\n                    to = {pageNames[NEW]}\n                    name = {NEW}\n                    active={active === NEW}\n                    onClick={handleItemClick}\n                >\n                    New\n                </Menu.Item>               \n            </Menu>\n        </div>\n    );\n}\n\nexport default Navbar;","const Home = () => {\n\n    return (\n        <div>\n        </div>\n    );\n}\n\nexport default Home;","import './Map.css'\nimport { useEffect, useMemo, useState } from 'react';\n\nconst Map = () => {\n    const [gardens, setGardens] = useState([]);\n    const [coordsToNames, setCoordsToNames] = useState({});\n    const [currentGarden, setCurrentGarden] = useState(null);\n    const [gardenPositions, setGardenPositions] = useState([]);\n\n    const atlantaConfig = useMemo(() => ({\n        \"center\": [-84.3880, 33.7490], zoom: 10, view: 'Auto',\n        \"authOptions\": {\n            \"authType\": \"subscriptionKey\",\n            \"subscriptionKey\": \"oJw5kVebBOggGf15Sn_CLR3jIN7xQrQulnRC7567uVc\"\n        }\n    }), []);\n    var subscriptionKeyCredential = new window.atlas.service.SubscriptionKeyCredential(atlantaConfig.authOptions.subscriptionKey);\n    var pipeline = window.atlas.service.MapsURL.newPipeline(subscriptionKeyCredential);\n    var searchURL = useMemo(() => new window.atlas.service.SearchURL(pipeline), [pipeline]);\n\n    useEffect(() => {\n        const getGardens = async () => {\n            try {\n                let response = await fetch(`/api/garden-get`);\n                let json = await response.json();\n                setGardens(json);\n            } catch (err) {\n                console.log(err);\n                setGardens({\n                    \"Bayside\": {\n                        \"NAME\": \"Bayside\", \n                        \"ADDRESS\": \"2949 Bell Blvd. Bayside, NY 11360\",\n                        \"CONTACT_INFO\": \"test@test.com\",\n                        \"DESCRIPTION\": \"Lovely site with great greens\",\n                        \"IMAGE_URL\": \"https://www.gardeningknowhow.com/wp-content/uploads/2013/06/community-garden.jpg\"\n                    }\n                })\n            }\n        }\n        getGardens();\n    }, [setGardens]);\n\n    useEffect(() => {\n        const getGardenPositions = async () => {\n            var newCoordsToNames = coordsToNames;\n            var newGardenPositions = gardenPositions;\n            for (var gardenName in gardens) {\n                var gardenData = gardens[gardenName];\n                var query = gardenData[\"ADDRESS\"];\n                try {\n                    var results = await searchURL.searchAddress(window.atlas.service.Aborter.timeout(10000), query, {\n                        limit: 1\n                    })\n                    var data = results.geojson.getFeatures();\n                    newGardenPositions.push(data);\n                    if (data[\"features\"]) {\n                        newCoordsToNames[data[\"features\"][0][\"geometry\"][\"coordinates\"]] = gardenName;\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n            setCoordsToNames(newCoordsToNames);\n            setGardenPositions(newGardenPositions);\n        }\n        getGardenPositions();\n    }, [gardens, searchURL, coordsToNames, setCoordsToNames, gardenPositions, setGardenPositions]);\n\n    useEffect(() => {\n        const createMap = () => {\n            var map = new window.atlas.Map(\"map\", {\n                center: atlantaConfig.center,\n                zoom: atlantaConfig.zoom,\n                view: atlantaConfig.view,\n                authOptions: atlantaConfig.authOptions\n            });\n            var datasource = new window.atlas.source.DataSource();\n            var resultLayer = new window.atlas.layer.SymbolLayer(datasource, null, {\n                iconOptions: {\n                    image: 'pin-round-darkblue',\n                    anchor: 'center',\n                    allowOverlap: true\n                },\n                textOptions: {\n                    anchor: \"top\"\n                }\n            });\n            var popup = new window.atlas.Popup();\n            map.events.add('ready', () => {\n                map.sources.add(datasource);\n                map.layers.add(resultLayer);\n                for (var gardenPosition of gardenPositions) {\n                    datasource.add(gardenPosition);\n                }\n                map.events.add('click', resultLayer, function (e) {\n                    if (e.shapes && e.shapes.length > 0) {\n                        var content, coordinate;\n                        coordinate = e.shapes[0].data.geometry.coordinates;\n                        content = `<div class=\"azurePopup\">\n                                        <div>${coordsToNames[coordinate]}</div>\n                                   </div>`;\n                        if (content && coordinate) {\n                            popup.setOptions({ content: content, position: coordinate });\n                            popup.open(map);\n                            setCurrentGarden(gardens[coordsToNames[coordinate]]);\n                        }\n                    }\n                });\n            })\n        }\n        createMap();\n    }, [gardenPositions, coordsToNames, gardens, setCurrentGarden, atlantaConfig]);\n\n    return (\n        <div className=\"mapPage\">\n            <div id=\"map\">\n\n            </div>\n            <div className=\"gardenInfo\">\n                {(currentGarden) ? (\n                    <div className=\"row\">\n                        <div className=\"col-4\">\n                            <h4>Garden Name</h4>\n                            <p>{currentGarden.NAME}</p>\n                            <h4>Garden Address</h4>\n                            <p>{currentGarden.ADDRESS}</p>\n                            <h4>Description</h4>\n                            <p>{currentGarden.DESCRIPTION.replaceAll(\"%0A\", \"\\n\")}</p>\n                            <p><strong>Please contact {currentGarden.EMAIL} for more information</strong></p>\n                        </div>\n                        <div className=\"col-8 imageCol\">\n                            {(currentGarden.IMAGE_URL) ? (<img src={currentGarden.IMAGE_URL} alt=\"Community garden\" />) : \"\"}\n                        </div>\n                    </div>\n                ) : \"\"}\n            </div>\n        </div>\n    );\n}\n\nexport default Map;","import { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\nimport './New.css'\n\nconst New = (props) => {\n    const [selectedFile, setSelectedFile] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const submit = (e) => {\n        e.preventDefault();\n        if (selectedFile === \"\" || name === \"\" || address === \"\" || email === \"\" || description === \"\") {\n            setError(\"Please fill in all required fields.\");\n            return;\n        } else {\n            setError(\"\");\n        }\n        var formData = new FormData();\n        var formName = name;\n        var formAddress = address;\n        var formEmail = email;\n        var formDescription = description;\n        formData.append(\"path\", selectedFile, `name: ${formName}%# address: ${formAddress}%# email: ${formEmail}%# description: ${formDescription}`);\n        console.log(`name: ${formName}%# address: ${formAddress}%# email: ${formEmail}%# description: ${formDescription}`)\n        fetch(`/api/garden-post`, {\n            method: 'POST',\n            body: formData\n        }).then(response => {\n            if (response.status === 200) {\n                console.log(\"SUCCESS\")\n            }\n        });\n    }\n \n    const onNameChange = (event) => {\n        setName(event.target.value.replaceAll(\"'\",\"''\").replaceAll(\"%#\", \"\"));\n    };\n\n    const onAddressChange = (event) => {\n        setAddress(event.target.value.replaceAll(\"'\",\"''\").replaceAll(\"%#\", \"\"));\n    };\n\n    const onEmailChange = (event) => {\n        setEmail(event.target.value.replaceAll(\"'\",\"''\").replaceAll(\"%#\", \"\"));\n    };\n\n    const onDescriptionChange = (event) => {\n        setDescription(event.target.value.replaceAll(\"'\",\"''\").replaceAll(\"%#\", \"\"));\n    };\n\n    const onFileChange = (event) => {\n        setSelectedFile(event.target.files[0]);\n    };\n\n    return (\n        <div style = {{ margin: '10px'}}>\n            <form method=\"POST\" onSubmit={submit} className=\"newForm\">\n                <Input type=\"text\" className=\"gardenFormField\" placeholder=\"Garden Name\" name=\"name\" onChange={onNameChange}/>\n                <Input type=\"text\" className=\"gardenFormField\" placeholder=\"Garden Address\" name=\"address\" onChange={onAddressChange}/>\n                <Input type=\"text\" className=\"gardenFormField\" placeholder=\"Your Contact Info\" name=\"email\" onChange={onEmailChange}/>\n                <textarea className=\"gardenFormField ui\" placeholder=\"Tell us about this garden!\" rows=\"3\" name=\"description\" onChange={onDescriptionChange}/>\n                <Input type=\"file\" className=\"gardenFormField\" name=\"path\" id=\"path\" onChange={onFileChange}/>\n                <Input type=\"submit\" className=\"gardenFormField\" />\n            </form>\n            <p>{error}</p>\n        </div>\n    );\n}\n\nexport default New;","import { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from '../home/Home';\nimport Map from '../map/Map';\nimport New from '../new/New';\n\nconst Router = () => {\n    return (\n        <Switch>\n            <Route exact path = \"/\" render = {(props) => <Home {...props}/>}/>\n            <Route exact path = \"/map\" render = {(props) => <Map {...props}/>}/>\n            <Route exact path = \"/new\" render = {(props) => <New {...props}/>}/>\n            <Route path = \"/\">\n                <Redirect to =\"/\"/>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default Router;","import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/navbar/Navbar';\nimport Router from './components/router/Router';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" render={(props) => <Navbar {...props}/>}/>\n        </Switch>\n        <Router/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}